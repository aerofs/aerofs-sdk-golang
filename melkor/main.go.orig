package main

// The entrypoint for the Melkor webapp demonstrating the AeroFS Golang SDK

import (
	"fmt"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"os"
	"time"
)

// Global logger
var logger *log.Logger

const (
	hostName = "localhost:1337"
)

func main() {
	err := initLogger()
	if err != nil {
		fmt.Println("Unable to initialize log file")
		os.Exit(1)
	}
	logger.Print("Melkor beginning startup...")

	// Set Handlers
	router := mux.NewRouter()
	router.HandleFunc("/", defaultHandler).Methods("GET")
	router.HandleFunc("/login", loginHandler).Methods("POST")
	router.HandleFunc("/{miscellaneous}", MiscHandler).Methods("GET")

	//r.GET("/test", test_1)
	//r.GET("/", arrive)
	//r.GET("/redirect", redirect)
	//r.GET("/tokenization", tokenization)
	http.ListenAndServe("localhost:1337", router)
}

// Initialize the Global server logger
func initLogger() error {
	t := time.Now()
	logTime := fmt.Sprintf("%d-%d-%d_%d-%d-%d",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())
	logName := fmt.Sprintf("logs/Melkor_Logs_%s", logTime)
	logFile, err := os.OpenFile(logName, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)

<<<<<<< HEAD
	if err != nil {
		http.Error(rw, err.Error(), 500)
		return
	}

	aeroUrl := ac.GetAuthorizationUrl()
	fmt.Println("URL is", aeroUrl)
	http.Redirect(rw, req, aeroUrl, 301)
}

// Receive a Token after used accepts permissions
func tokenization(rw http.ResponseWriter, req *http.Request, p httprouter.Params) {
	for a, e := range req.URL.Query() {
		fmt.Println("%s : %s", a, e)
	}
	str := fmt.Sprintf("%v", req.URL.Query())
	fmt.Println(str)
	ac, err := aerofsapi.NewAuthClient("appconfig.json",
		"http://localhost:13337/tokenization", "uniqueState", []string{"files.read",
			"files.write", "user.read", "user.write", "user.password"})
	code := req.URL.Query()["code"][0]
	fmt.Println(code)
	token, _, err := ac.GetAccessToken(code)
	if err != nil {
		fmt.Println("Unable to get correct access token")
	}
	fmt.Println("Token is", token)
	a, _ := aerofsapi.NewClient(token, ac.AeroUrl)
	users, _ := sdk.ListUsers(a, 100)
	devices, _ := sdk.ListDevices(a, "daniel.cardoza@aerofs.com")
	us := fmt.Sprintf("%v %v", *users, *devices)
	rw.Write([]byte(us))

	file, err := sdk.GetFileClient(a,
		"568e2b4ca47d340d5cb9fcb85c07f2a04e86ed3b4c0d4d43ac3a04a076025f16", []string{})
	if err != nil {
		fmt.Printf("Bad thing happened\n")
		http.Error(rw, err.Error(), 500)
		return
	}

	content, err := file.GetContent()
	if err != nil {
		fmt.Printf("Bad thing happened\n")
		http.Error(rw, err.Error(), 500)
		return
	}
	rw.Write(*content)
	folder, err := sdk.GetFolderClient(a, "root", []string{})
	if err != nil {
		fmt.Printf("Bad thing happened\n")
		http.Error(rw, err.Error(), 500)
		return
	}

	folder.LoadPath()
	folder.LoadChildren()
	fol := fmt.Sprintf("%v", folder.Desc)
	f := fmt.Sprintf("%v", file.Desc)
	rw.Write([]byte(f + "\n\n\n" + fol))
}
=======
	// Log the file location, time and date
	logger = log.New(logFile, "", log.LstdFlags|log.Lshortfile)
>>>>>>> 51208e57c18589c1af6c19d6ebe82e6fcf31841d

	return err
}
